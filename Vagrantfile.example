# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = 'box-cutter/ubuntu1404'

  # PORT MAPPING

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # config.vm.network "forwarded_port", guest: 3000, host: 3000
  config.vm.network "forwarded_port", guest: 9200, host: 9200


  # SYNCED FOLDERS

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../answers", "/home/vagrant/answers"


  # PROVIDER CONFIG

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.

  config.vm.provider :virtualbox do |vb|
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "1536"]
    vb.customize ["modifyvm", :id, "--cpus", "4"]
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
  end

  config.vm.provider :vmware_fusion do |v|
    v.gui = false
    v.vmx["memsize"] = "1536"
    v.vmx["numvcpus"] = "4"
  end

  # View the documentation for the provider you're using for more
  # information on available options.

  
  # PROVISIONING

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #

  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = ['kitchen/cookbooks', 'kitchen/site-cookbooks']
    chef.data_bags_path = 'kitchen/data_bags'
    chef.encrypted_data_bag_secret_key_path = '.databag_secret'
    chef.roles_path = 'kitchen/roles'
    chef.json = JSON.parse(Pathname(__FILE__).dirname.join('kitchen', 'nodes', 'localhost.json').read)
    # chef.log_level = 'debug'
    chef.verbose_logging = true
  end

  # Uncomment the lines below and install the vagrant-omnibus plugin if
  # you're experiencing errors regarding the lack of a chef-client.

  # config.omnibus.chef_version = :latest
  # config.omnibus.install_url = 'https://www.opscode.com/chef/install.sh'

end
