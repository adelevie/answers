require 'spec_helper'


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Answers::Api::V1::AnswersController, :type => :controller do
  routes { Answers::Core::Engine.routes}

  # This should return the minimal set of attributes required to create a valid
  # Answer. As you add validations to Answer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      text: "this is text",
      in_language: "english",
      need_to_know: "things you need to know",
      question_id: "1"
    }
  }

  let(:invalid_attributes) {
    {
      jelly: "No one asked what goes well with peanut butter"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AnswersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all answers as @answers" do
      controller do
        controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"

        answer = Answers::Answer.create! valid_attributes
        get :index, valid_session
        expect(assigns(:answers)).to eq([answer])
      end
    end
  end

  describe "GET show" do
    it "assigns the requested answer as @answer" do
      controller do
        controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
        answer = Answers::Answer.create! valid_attributes
        get :show, {:id => answer.to_param}, valid_session
        expect(assigns(:answer)).to eq(answer)
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
        it "creates a new Answer" do
          controller do
            controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
            expect {
                post :create, {:answer => valid_attributes}, valid_session
             }.to change(Answers::Answer, :count).by(1)
          end
        end

        it "assigns a newly created answer as @answer" do
          controller do
            controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
            post :create, {:answer => valid_attributes}, valid_session
            expect(assigns(:answer)).to be_a(Answers::Answer)
            expect(assigns(:answer)).to be_persisted
          end
        end

        it "redirects to the created answer" do
          controller do
            controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
            post :create, {:answer => valid_attributes}, valid_session
            expect(response).to redirect_to(Answers::Answer.last)
          end
        end

    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved answer as @answer" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          post :create, {:answer => invalid_attributes}, valid_session
          expect(assigns(:answer)).to be_a_new(Answers::Answer)
        end
      end

      it "re-renders the 'new' template" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          post :create, {:answer => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested answer" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          answer = Answers::Answer.create! valid_attributes
          put :update, {:id => answer.to_param, :answer => new_attributes}, valid_session
          answer.reload
          skip("Add assertions for updated state")
        end
      end

      it "assigns the requested answer as @answer" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          answer = Answers::Answer.create! valid_attributes
          put :update, {:id => answer.to_param, :answer => valid_attributes}, valid_session
          expect(assigns(:answer)).to eq(answer)
        end
      end

      it "redirects to the answer" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          answer = Answers::Answer.create! valid_attributes
          put :update, {:id => answer.to_param, :answer => valid_attributes}, valid_session
          expect(response).to redirect_to(answer)
        end
      end
    end

    describe "with invalid params" do
      it "assigns the answer as @answer" do
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          answer = Answers::Answer.create! valid_attributes
          put :update, {:id => answer.to_param, :answer => invalid_attributes}, valid_session
          expect(assigns(:answer)).to eq(answer)
        end
      end

      it "re-renders the 'edit' template" do
        answer = Answers::Answer.create! valid_attributes
        controller do
          controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
          put :update, {:id => answer.to_param, :answer => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested answer" do
      controller do
        controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
        answer = Answers::Answer.create! valid_attributes
        expect {
          delete :destroy, {:id => answer.to_param}, valid_session
        }.to change(Answers::Answer, :count).by(-1)
      end
    end

    it "redirects to the answers list" do
      controller do
        controller.prepend_view_path "#{Rails.root}/answers/core/app/views/answers/api/v1/answers"
        answer = Answers::Answer.create! valid_attributes
        delete :destroy, {:id => answer.to_param}, valid_session
        expect(response).to redirect_to(answers_url)
      end
    end
  end

end
