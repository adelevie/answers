# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = ENV['VAGRANT_BOX'] || 'ubuntu/trusty64'

  # unquote if you'd prefer to start from a prebuilt box based on our latest release.
  # config.vm.box = ENV['VAGRANT_BOX'] || 'http://answers.gsa.io/answers.box'

  # unquote if you want a box that's compatible with vmware, note, you'll
  # have to use the vagrant omnibus plugin as well.
  # config.vm.box = ENV['VAGRANT_BOX'] || 'box-cutter/ubuntu1404'
  # config.omnibus.chef_version = :latest
  # config.omnibus.install_url = 'https://www.opscode.com/chef/install.sh'


  config.vm.network "forwarded_port", guest: 80, host:9080
  config.vm.network "forwarded_port", guest: 443, host:9443
  config.vm.network "forwarded_port", guest: 9200, host: 9200
  # config.vm.network "forwarded_port", guest: 11211, host: 11211

  config.vm.synced_folder "../answers", "/var/www/answers/current"

  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", ENV['VAGRANT_MEMORY'] || "2048"]
    vb.customize ["modifyvm", :id, "--cpus", "2"]
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
  end

  config.vm.provider :vmware_fusion do |v|
    v.gui = false
    v.vmx["memsize"] = ENV['VAGRANT_MEMORY'] || "2048"
    v.vmx["numvcpus"] = "2"
  end

  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = ['kitchen/cookbooks', 'kitchen/site-cookbooks']
    chef.data_bags_path = 'kitchen/data_bags'
    chef.encrypted_data_bag_secret_key_path = '.databag_secret'
    chef.roles_path = 'kitchen/roles'
    chef.json = JSON.parse(Pathname(__FILE__).dirname.join('kitchen', 'nodes', 'localhost.json').read)
    # chef.log_level = 'debug'
    chef.verbose_logging = true
  end

end
